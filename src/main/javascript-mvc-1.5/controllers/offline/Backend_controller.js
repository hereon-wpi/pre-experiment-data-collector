/*
 * The main contributor to this project is Institute of Materials Research,
 * Helmholtz-Zentrum Geesthacht,
 * Germany.
 *
 * This project is a contribution of the Helmholtz Association Centres and
 * Technische Universitaet Muenchen to the ESS Design Update Phase.
 *
 * The project's funding reference is FKZ05E11CG1.
 *
 * Copyright (c) 2012. Institute of Materials Research,
 * Helmholtz-Zentrum Geesthacht,
 * Germany.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

OfflineBackendController = MVC.Controller.extend('OfflineBackend',
    /* @Static */
    {
        path_to_data:ApplicationContext.domain
    },
    /* @Prototype */
    {
        "DataSetNames.json.find_all subscribe":function (params) {
            var result = this.loadDataSets(function (dataSetFile) {
                return {
                    value:dataSetFile.Name
                };
            });
            params.onSuccess(result);
        },
        "DataSets.json.find_all subscribe":function (params) {
            var me = this;
            var result = this.loadDataSets(function (dataSetFile) {
                var encodedStream = dataSetFile.OpenAsTextStream(FSO_CONSTS.ForReading, FSO_CONSTS.TristateTrue);
                try {
                    var encoded = encodedStream.ReadAll();
                    var data = JSON.parse(Base64.decode(encoded));

                    return me.createDataSet(dataSetFile.Name, ApplicationContext.meta, data);
                } finally {
                    encodedStream.Close();
                }
            });
            params.onSuccess(result);
        },
        "DataSets.json.create subscribe":function (params) {
            var result = this.createDataSet(params.parameters['data-set-name'], ApplicationContext.meta, {});
            //Model.create passes onComplete instead of onSuccess
            var onSuccess = params.onComplete;
            onSuccess(result);
        },
        /**
         * Event is generated by clicking on a hyper link next to data set name.
         *
         * @see tomo.scan.ejs
         */
        "Offline.start.upload_data subscribe":function (params) {
            var me = this,
                dataSetName = params['data-set-name'],
                uploadFiles = function (dataSet, serverUrl) {
                    var fileNames = (function () {
                        var result = [];
                        $(dataSet.meta.forms)/*.filter(By.upload)*/.each(function (i, frm) {
                            if (frm.type == 'upload') {
                                result = result.concat(dataSet.data[frm.id][frm.fields[0].id].split(';'));
                            }
                        });
                        return result;
                    })();

                    var filesList = (function (fileNames) {
                        var result = [];
                        $(fileNames).each(function (i, name) {
                            var file = FSO.GetFile(ApplicationContext.domain + "/upload/" + name);
                            result.push(
                                {
                                    mozFullPath:file.Path,
                                    name:name,
                                    size:file.size,
                                    type:file.Type
                                });
                        });
                        return result;
                    })(fileNames);

                    //create form
                    var $frmUpload = $('<form method="POST" enctype="multipart/form-data" type="upload">')
                        .attr({ action:serverUrl + "/backend/upload" })
                        //prevent this form from being inserted into DOM
                        .css({ position:'absolute', top:-1000, left:-1000 })
                        .appendTo($(document.body));

                    //initialize fileUpload
                    var $fileUpload = $frmUpload
                        .fileupload({
                            url:serverUrl + "/backend/upload",
                            //iframe transport does not support XHR
                            //fileInput: $('#inpFileUpload', $frmUpload),
                            sequentialUploads:true,
                            autoUpload:true,
                            //avoid authentication issues with ajax requests
                            forceIframeTransport:true
                        });

                    //add and upload files
                    $fileUpload.fileupload('add', {
                        uploadToServer:true,
                        form:$frmUpload,
                        files:filesList,
                        fileInput:(function (filesList) {
                            var result = $();
                            $(filesList).each(function (i, file) {
                                //we can not set input['file'].value programmatically. So we use the following workaround
                                //TODO use the following solution: http://stackoverflow.com/a/4367823
                                var fileInput = $('<input type="file" />').appendTo($frmUpload);
                                do {
                                    prompt("Please choose the following file in the next dialog window:", file.mozFullPath);
                                    fileInput.click();
                                } while (fileInput.val() !== file.mozFullPath);
                                result = result.add(fileInput);
                            });
                            return result;
                        })(filesList)
                    });

                    $fileUpload.fileupload('destroy').remove();
                },
                uploadDataSet = function (dataSet, serverUrl) {
                    var $submit = $(new View({ url:'views/main/wizard.form.submit.ejs' }).render()).attr({ action:serverUrl + '/backend/SubmitData' }).appendTo($(document.body));

                    var data = dataSet.data;
                    var encodedData = Base64.encode(JSON.stringify(data.attributes()));
                    $('<input type="hidden" name="data">').val(encodedData).appendTo($submit);

                    var meta = dataSet.meta;
                    var encodedMeta = Base64.encode(JSON.stringify(meta.attributes()));
                    $('<input type="hidden" name="meta">').val(encodedMeta).appendTo($submit);

                    $('<input type="hidden" name="is-offline"/>').val(ApplicationContext.offlineMode).appendTo($submit);

                    $('<input type="hidden" name="data-set-name"/>').val(dataSet.id).appendTo($submit);

                    $submit.submit();
                };

            var msg = "Please enter URL of th e production server below, ex. http://hzgharwi3:8080/PreExperimentDataCollector";
            var serverUrl = prompt(msg, "http://<server>:<port>/<app>");
            while (!serverUrl) {
                serverUrl = prompt(msg, "http://<server>:<port>/<app>");
            }

            var dataSet = DataSet.find_all({
                'data-set-name':dataSetName
            }, {
                onSuccess:function (data) {
                    for (var i = 0, size = data.length, dataSet = data[0]; i < size; dataSet = data[++i]) {
                        if (dataSet.id === dataSetName) {
                            uploadDataSet(dataSet, serverUrl);
                            uploadFiles(dataSet, serverUrl);
                        }
                    }
                }
            });
        },
        /**
         * Emulates DataSetsService response.
         *
         * @param {String} dataSetName
         * @param {MetaDataJson} meta
         * @param {Object} data
         */
        createDataSet:function (dataSetName, meta, data) {
            var result = {
                id:dataSetName,
                readonly:false,
                meta:meta,
                data:data,
                timestamp:+new Date()
            };
            return result;
        },
        /**
         * Loads data set files from local storage, executes cbk on each file and adds the result to an array,
         * returns resulting array.
         *
         * @param {Function} cbk
         * @return {Array}
         */
        loadDataSets:function (cbk) {
            var pathToData = this.Class.path_to_data;
            if (!FSO.FolderExists(pathToData)) {
                FSO.CreateFolder(pathToData);
                return [];
            }
            var dataFolder = FSO.GetFolder(pathToData);
            var dataSets = new Enumerator(dataFolder.Files);

            var result = [];
            for (; !dataSets.atEnd(); dataSets.moveNext()) {
                var dataSetFile = dataSets.item();
                result.push(cbk(dataSetFile));
            }
            return result;
        }
        //TODO other cases
    }
);