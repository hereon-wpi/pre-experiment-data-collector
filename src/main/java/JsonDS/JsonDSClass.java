/*
 * The main contributor to this project is Institute of Materials Research,
 * Helmholtz-Zentrum Geesthacht,
 * Germany.
 *
 * This project is a contribution of the Helmholtz Association Centres and
 * Technische Universitaet Muenchen to the ESS Design Update Phase.
 *
 * The project's funding reference is FKZ05E11CG1.
 *
 * Copyright (c) 2012. Institute of Materials Research,
 * Helmholtz-Zentrum Geesthacht,
 * Germany.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

//+======================================================================
// $Source:  $
//
// Project:   	Tango Device Server
//
// Description:	java source code for the JsonDS class .
//              This class is a singleton class and implements everything
//              which exists only once for all the  JsonDS object
//              It inherits from the DeviceClass class.
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-======================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

package JsonDS;

import fr.esrf.Tango.DevFailed;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.*;
import org.apache.log4j.Logger;

import java.util.Vector;

public class JsonDSClass extends DeviceClass implements TangoConst {
    private static final Logger log = Logger.getLogger(JsonDSClass.class);

    /**
     * JsonDSClass class instance (it is a singleton).
     */
    private static JsonDSClass _instance = null;

    /**
     * Class properties array.
     */
    private DbDatum[] cl_prop = null;

    //--------- Start of properties data members ----------


//--------- End of properties data members ----------


    //===================================================================
//
// method : 		instance()
// 
// description : 	static method to retrieve the JsonDSClass object 
//					once it has been initialised
//
//===================================================================			
    public static JsonDSClass instance() {
        if (_instance == null) {
            log.error("JsonDSClass is not initialised !!!");
            log.error("Exiting");
            Thread.currentThread().interrupt();
        }
        return _instance;
    }

    //===================================================================
//
// method : 		Init()
// 
// description : 	static method to create/retrieve the JsonDSClass
//					object. This method is the only one which enables a 
//					user to create the object
//
// in :			- class_name : The class name
//
//===================================================================			
    public static JsonDSClass init(String class_name) throws DevFailed {
        if (_instance == null) {
            _instance = new JsonDSClass(class_name);
        }
        return _instance;
    }

    //===================================================================
//
// method : 		JsonDSClass()
// 
// description : 	constructor for the JsonDSClass class
//
// argument : in : 	- name : The class name
//
//===================================================================			
    protected JsonDSClass(String name) throws DevFailed {
        super(name);

        Util.out2.println("Entering JsonDSClass constructor");
        write_class_property();
        get_class_property();

        Util.out2.println("Leaving JsonDSClass constructor");
    }

    //===================================================================
//
// method : 		command_factory()
// 
// description : 	Create the command object(s) and store them in the
//					command list
//===================================================================			
    public void command_factory() {

        //	add polling if any
        for (int i = 0; i < command_list.size(); i++) {
            Command cmd = (Command) command_list.elementAt(i);
        }

        for (JsonDSCommand cmd : JsonDSCommand.values()) {
            command_list.add(cmd.toCommand());
        }
    }


    //===================================================================
//
// method : 		device_factory()
// 
// description : 	Create the device object(s) and store them in the 
//					device list
//
// argument : in : 	String[] devlist : The device name list
//
//===================================================================			
    public void device_factory(String[] devlist) throws DevFailed {

        for (int i = 0; i < devlist.length; i++) {
            Util.out4.println("Device name : " + devlist[i]);

            // Create device and add it into the device list
            //----------------------------------------------
            device_list.addElement(new JsonDS(this, devlist[i]));

            // Export device to the outside world
            //----------------------------------------------
            if (Util._UseDb == true)
                export_device(((DeviceImpl) (device_list.elementAt(i))));
            else
                export_device(((DeviceImpl) (device_list.elementAt(i))), devlist[i]);
        }
    }

    //=============================================================================
//
//	Method:	attribute_factory(Vector att_list)
//
//=============================================================================
    public void attribute_factory(Vector att_list) throws DevFailed {
        //TODO: unfortunately device_list is empty at this point
        //TODO: otherwise we could add all attributes here
//        for (JsonDSAttr attr : JsonDSAttr.values()) {
//            att_list.add(attr.toTangoAttribute().toAttr());
//        }


    }
//===================================================================

    /**
     * Get the class property for specified name.
     *
     * @param name The property name.
     */
//===================================================================
    public DbDatum get_class_property(String name) {
        for (int i = 0; i < cl_prop.length; i++)
            if (cl_prop[i].name.equals(name))
                return cl_prop[i];
        //	if not found, return  an empty DbDatum
        return new DbDatum(name);
    }

//===================================================================

    /**
     * Read the class properties from database.
     */
//===================================================================			
    public void get_class_property() throws DevFailed {
        //	Initialize your default values here.
        //------------------------------------------


        //	Read class properties from database.(Automatic code generation)
        //-------------------------------------------------------------
        if (Util._UseDb == false)
            return;
        String[] propnames = {
        };

        //	Call database and extract values
        //--------------------------------------------
        cl_prop = get_db_class().get_property(propnames);
        int i = -1;

        //	End of Automatic code generation
        //-------------------------------------------------------------

    }

//===================================================================

    /**
     * Set class description as property in database
     */
//===================================================================			
    private void write_class_property() throws DevFailed {
        //	First time, check if database used
        //--------------------------------------------
        if (Util._UseDb == false)
            return;

        //	Prepeare DbDatum
        //--------------------------------------------
        DbDatum[] data = new DbDatum[2];
        data[0] = new DbDatum("ProjectTitle");
        data[0].insert("");

        data[1] = new DbDatum("Description");
        data[1].insert("");

        //	Call database and and values
        //--------------------------------------------
        get_db_class().put_property(data);
    }

}
